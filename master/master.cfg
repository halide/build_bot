# -*- python -*-
# ex: set syntax=python:

from buildbot.worker import Worker
from buildbot.config import BuilderConfig
from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.github import GitHubPullrequestPoller
from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.svnpoller import split_file_alwaystrunk
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.trysched import Try_Userpass
from buildbot.changes import filter
from buildbot.plugins import util
from twisted.internet import defer

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDWORKERS

import os

# The 'workers' list defines the set of recognized buildworkers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

password = open('halide_bb_pass.txt').read().strip()

workers = []
worker_suffixes = ['-1', '-2', '-3', '-4', '-5', '-6']
for sfx in worker_suffixes:
    workers.append(Worker('linux-worker' + sfx,     password, max_builds = 2))
    workers.append(Worker('mac-worker' + sfx,       password, max_builds = 2))
    workers.append(Worker('arm32-linux-worker' + sfx, password, max_builds = 1))
    workers.append(Worker('arm64-linux-worker' + sfx, password, max_builds = 1))
    workers.append(Worker('win-worker' + sfx,       password, max_builds = 1))

c['workers'] = workers

# 'protocols' contains information about protocols which master will use for
# communicating with workers.
# You must define at least 'port' option that workers could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildworkers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9990}}

####### LOCKS

# Performance testing requires exclusive use of a worker

# Compute-intensive build steps will grab this lock in reader
# mode. The performance test will grab it in exclusive mode.
performance_lock = util.WorkerLock("performance_lock",
                                  maxCount = 9999)

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of halide.


c['change_source'] = []

token = open('github_token.txt').read().strip()

c['change_source'].append(GitPoller(
    repourl = 'git://github.com/halide/Halide.git',
    workdir = 'gitpoller-workdir',
    branch = 'master',
    pollInterval = 60*5,  # Check Halide master every five minutes
    pollAtLaunch = True))

def pr_filter(pr):
    # Auto test anything in the halide master repo
    # TODO: Add some means to test PRs from other repos once a human checks them
    print("Considering PR: ", pr['title'])
    #for (k, v) in pr.items():
    #    print(k, v)
    repo = pr['head']['repo']
    result = repo is not None and repo['full_name'] == 'halide/Halide'
    print("Filter result: ", result)
    return result

c['change_source'].append(GitHubPullrequestPoller(
    owner = 'halide',
    repo = 'Halide',
    token = token,
    pullrequest_filter = pr_filter,
    pollInterval = 60*5,  # Check Halide PRs every five minutes
    pollAtLaunch = True))

c['change_source'].append(SVNPoller(
    repourl = 'http://llvm.org/svn/llvm-project/llvm/trunk',
    split_file = split_file_alwaystrunk,
    pollInterval = 60*60*8, # Only check llvm once every eight hours
    pollAtLaunch = True))

c['change_source'].append(SVNPoller(
    repourl = 'http://llvm.org/svn/llvm-project/cfe/trunk',
    split_file = split_file_alwaystrunk,
    pollInterval = 60*60*8, # Only check llvm once every eight hours
    pollAtLaunch = True))

####### CODEBASES

all_repositories = {
    r'git://github.com/halide/Halide.git' : 'halide',
    u'https://github.com/halide/Halide.git' : 'halide',
    r'http://llvm.org/svn/llvm-project/llvm/trunk' : 'llvm-trunk',
    r'http://llvm.org/svn/llvm-project/cfe/trunk' : 'clang-trunk',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_391/final' : 'llvm-391',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_391/final' : 'clang-391',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_401/final' : 'llvm-401',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_401/final' : 'clang-401',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_500/final' : 'llvm-500',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_500/final' : 'clang-500',
}

def codebase_generator(chdict):
    repo = chdict['repository']
    return all_repositories[repo]

c['codebaseGenerator'] = codebase_generator

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.steps.worker import RemoveDirectory
from buildbot.steps.transfer import FileUpload
from buildbot.steps.worker import MakeDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Property
from buildbot.process.properties import renderer
from buildbot.process.properties import Interpolate

def add_get_source_steps(factory, llvm):

  llvm_codebase  = 'llvm-' + llvm
  clang_codebase = 'clang-' + llvm
  if llvm == 'trunk':
    llvm_svn_path = 'trunk'
  else:
    llvm_svn_path = 'tags/RELEASE_' + llvm + '/final'

  factory.addStep(Git(name = 'Get Halide master',
                      locks = [performance_lock.access('counting')],
                      codebase = 'halide',
                      workdir = 'halide',
                      repourl = 'git://github.com/halide/Halide.git',
                      mode = 'incremental'))

  factory.addStep(ShellCommand(name = 'svn cleanup',
                               locks = [performance_lock.access('counting')],
                               flunkOnFailure = False,
                               workdir = 'llvm',
                               command = ['svn', 'cleanup']))

  factory.addStep(ShellCommand(name = 'svn cleanup',
                               locks = [performance_lock.access('counting')],
                               flunkOnFailure = False,
                               workdir = 'llvm/tools/clang',
                               command = ['svn', 'cleanup']))

  factory.addStep(SVN(name = 'Get LLVM source',
                      locks = [performance_lock.access('counting')],
                      codebase = llvm_codebase,
                      workdir = 'llvm',
                      repourl = r'http://llvm.org/svn/llvm-project/llvm/%s' % llvm_svn_path,
                      mode = 'incremental'))

  factory.addStep(SVN(name = 'Get Clang source',
                      locks = [performance_lock.access('counting')],
                      codebase = clang_codebase,
                      workdir = 'llvm/tools/clang',
                      repourl = r'http://llvm.org/svn/llvm-project/cfe/%s' % llvm_svn_path,
                      mode = 'incremental'))

@renderer
def get_distrib_name(props):
  rev = props.getProperty('got_revision')['halide']
  builder = props.getProperty('buildername')
  if builder.startswith('win'): suffix = '.zip'
  else: suffix = '.tgz'
  return '~/artifacts/halide-' + builder + '-' + rev + suffix

def get_llvm_cmake_command(os):
  llvm_cmake_command = [
    'cmake',
    '-DCMAKE_INSTALL_PREFIX=../llvm-install',
    '-DLLVM_ENABLE_TERMINFO=OFF',
    '-DLLVM_TARGETS_TO_BUILD=X86;ARM;NVPTX;AArch64;Mips;Hexagon;PowerPC',
    '-DCMAKE_BUILD_TYPE=Release']
  if '-32' in os:
    llvm_cmake_command.append('-DLLVM_BUILD_32_BITS=ON')
  else:
    llvm_cmake_command.append('-DLLVM_BUILD_32_BITS=OFF')

  llvm_cmake_command.append('../llvm/')

  if os.startswith('linux-32'):
    llvm_cmake_command.append('-DCMAKE_FIND_ROOT_PATH=/usr/lib/i386-linux-gnu')
    llvm_cmake_command.append('-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY')

  if os.startswith('mac-32'):
    llvm_cmake_command.append('-DCMAKE_FIND_ROOT_PATH=/usr/lib')
    llvm_cmake_command.append('-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY')

  if os.startswith('mingw'):
    llvm_cmake_command.append('-G')
    llvm_cmake_command.append('MSYS Makefiles')
    # mingw gcc 5.2 doesn't compile llvm correctly with assertions on
    llvm_cmake_command.append('-DLLVM_ENABLE_ASSERTIONS=OFF')
  else:
    llvm_cmake_command.append('-DLLVM_ENABLE_ASSERTIONS=ON')


  return llvm_cmake_command

def get_env(os):
  env = {'LLVM_CONFIG': '../llvm-build/bin/llvm-config',
         'CLANG': '../llvm-build/bin/clang'}

  cxx = 'c++'
  cc = 'cc'
  ld = 'ld'

  if os.startswith('linux'):
    if '-gcc48' in os:
      cc = 'gcc-4.8'
      cxx = 'g++-4.8'
    elif '-gcc49' in os:
      cc = 'gcc-4.9'
      cxx = 'g++-4.9'
    elif '-gcc51' in os:
      cc = 'gcc-5.1'
      cxx = 'g++-5.1'
    elif '-gcc52' in os:
      cc = 'gcc-5.2'
      cxx = 'g++-5.2'
    elif '-gcc53' in os:
      cc = 'gcc-5.3'
      cxx = 'g++-5.3'
    else:
      assert(False)

    ld = 'ld'
    if '-32' in os:
      cxx += ' -m32'
      cc += ' -m32'
      ld += ' -melf_i386'
  elif os.startswith('mac'):
    if '-32' in os:
      cxx += ' -m32'
      cc += ' -m32'

  # The linux and arm linux buildbots have ccache installed
  if 'linux' in os:
    cxx = 'ccache ' + cxx
    cc = 'ccache ' + cc

  env['CXX'] = cxx
  env['CC'] = cc
  env['LD'] = ld

  if os.startswith('linux'):
      # Environment variables for testing Hexagon DSP
      env['HL_HEXAGON_TOOLS'] = '/usr/local/hexagon'
      env['HL_HEXAGON_SIM_REMOTE'] = '${PWD}/worker/' + os + '-trunk/halide/src/runtime/hexagon_remote/bin/v60/hexagon_sim_remote'
      env['HL_HEXAGON_SIM_CYCLES'] = '1'

  return env

def get_make_threads(os):
  if os.startswith('linux'):
    return 16
  elif os.startswith('mac'):
    return 4
  elif os.startswith('arm'):
    return 4
  elif os.startswith('mingw'):
    return 16
  else:
    return 1

def get_targets(os, llvm):
  targets = [('distrib', 'host'),
             ('build_tests', 'host'),
             ('test_correctness', 'host'),
             ('test_generators', 'host')]

  if not os.startswith('mingw'):
    # mingw's timers appear to be very low-resolution
    targets.append(('test_performance', 'host'))

  if os.startswith('linux-32-gcc53') or os.startswith('mac-32'):
    # Also test without sse 4.1
    targets.append(('test_correctness', 'x86-32'))

  if os.startswith('linux-64-gcc53') or os.startswith('mingw-64') or os.startswith('mac-64'):
    # extended cpu/gpu tests
    if not os.startswith('mingw'):
      targets.extend([('test_correctness', 'x86-64'),
                      ('test_correctness', 'x86-64-sse41'),
                      ('test_python', 'host')])

    targets.extend([('test_apps', 'host'),
                    ('test_tutorials', 'host')])

    if not os.startswith('mac'):
      # The linux and mingw build-bot has an nvidia card
      targets.extend([('test_correctness', 'host-cuda'),
                      ('test_generators', 'host-cuda'),
                      ('test_apps', 'host-cuda'),
                      ('test_correctness', 'host-opencl'),
                      ('test_generators', 'host-opencl'),
                      ('test_apps', 'host-opencl'),
                      ('correctness_gpu_multi_device', 'host-cuda-opencl')])

    else:
      # test metal on OS X
      targets.extend([('test_correctness', 'host-metal'),
                      ('test_generators', 'host-metal'),
                      ('test_apps', 'host-metal')])

    if os.startswith('linux-64-gcc53') and llvm == 'trunk':
      # Also test hexagon using the simulator
      for t in ['host-hvx_128', 'host-hvx_64']:
        targets.extend([('test_correctness', t),
                        ('test_generators', t),
                        ('test_apps', t)])

  # Also run Bazel tests, but only on linux-64 targets for now.
  # TODO: install & test Bazel on OSX and Windows builders in the future.
  if os.startswith('linux-64'):
      targets.append(('test_bazel', 'host'))

  return targets

def get_workers(os):
  if os.startswith('linux'):
    return ['linux-worker' + sfx for sfx in worker_suffixes]
  elif os.startswith('mac'):
    return ['mac-worker' + sfx for sfx in worker_suffixes]
  elif os.startswith('win') or os.startswith('mingw'):
    return ['win-worker' + sfx for sfx in worker_suffixes]
  elif os.startswith('arm32-linux'):
    return ['arm32-linux-worker' + sfx for sfx in worker_suffixes]
  elif os.startswith('arm64-linux'):
    return ['arm64-linux-worker' + sfx for sfx in worker_suffixes]

def create_factory(os, llvm):

  if os.startswith('win'): return create_win_factory(os, llvm)

  llvm_cmake_command = get_llvm_cmake_command(os)
  env           = get_env(os)
  targets       = get_targets(os, llvm)
  make_threads  = get_make_threads(os)

  factory = BuildFactory()

  add_get_source_steps(factory, llvm)

  factory.addStep(ShellCommand(name = 'Configure LLVM',
                               description = 'Configure LLVM',
                               locks = [performance_lock.access('counting')],
                               workdir = 'llvm-build',
                               env = env,
                               haltOnFailure = True,
                               command = llvm_cmake_command))
  factory.addStep(ShellCommand(name = 'Build LLVM',
                               description = 'Build LLVM',
                               locks = [performance_lock.access('counting')],
                               workdir = 'llvm-build',
                               env = env,
                               haltOnFailure = True,
                               command = ['make', '-j%s' % make_threads]))

  # Force a full rebuild of Halide every time
  factory.addStep(RemoveDirectory(dir='halide-build'))

  for (target, hl_target) in targets:
    target_env = env.copy()
    target_env['HL_TARGET'] = hl_target
    target_env['HL_JIT_TARGET'] = hl_target
    p = make_threads
    lock_mode = 'counting'
    if target == 'test_performance' or target == 'test_tutorials':
      p = 1
      lock_mode = 'exclusive'
    factory.addStep(ShellCommand(name = 'make ' + target,
                                 description = target + ' ' + hl_target,
                                 locks = [performance_lock.access(lock_mode)],
                                 workdir = 'halide-build',
                                 env = target_env,
                                 haltOnFailure = (target == 'distrib'),
                                 command = ['make', '-f', '../halide/Makefile', '-j%s' % p, target],
                                 timeout = 3600))
    if target == 'distrib' and 'testbranch' not in os:
      factory.addStep(
        FileUpload(workersrc = 'distrib/halide.tgz',
                   workdir = 'halide-build',
                   mode = 0644,
                   masterdest = get_distrib_name))

      factory.addStep(MasterShellCommand(
        workdir = '/home/abadams/artifacts',
        command = ['bash', '/home/abadams/build_bot_new/clean_artifacts.sh']))

  return factory

def create_win_factory(os, llvm):
  assert os.startswith('win')

  factory = BuildFactory()
  add_get_source_steps(factory, llvm)

  if llvm == 'trunk':
    llvm_version = '50'
  else:
    llvm_version = llvm[0:2]

  # Configure llvm
  if '-32' in os:
    build_32_bits = 'ON'
    project_type = 'Visual Studio 14'
  else:
    assert '-64' in os
    build_32_bits = 'OFF'
    project_type = 'Visual Studio 14 Win64'

  make_distro = '-distro' in os

  if make_distro:
    configs = ['Release', 'Debug']
  else:
    configs = ['Release']

  # Build llvm and Halide in release and debug modes
  for config in configs:

    factory.addStep(RemoveDirectory(dir = 'halide-build-' + config, haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'halide-build-' + config, haltOnFailure = False))

    if llvm == 'trunk':
      # Only do clean rebuilds of llvm on trunk
      factory.addStep(RemoveDirectory(dir = 'llvm-build-' + config, haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'llvm-build-' + config, haltOnFailure = False))

    if llvm == 'trunk':
      factory.addStep(RemoveDirectory(dir = 'llvm-install-' + config, haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'llvm-install-' + config, haltOnFailure = False))

    # '-Thost=x64' means 'Use 64-bit host compilers', which generally provides
    # better compile/link times (esp. for LLVM); be aware that in addition to
    # 64-bit OS + MSVC install, it requires CMake 3.8+ (earlier versions will
    # fail with obscure and misleading errors if you specify this flag).
    factory.addStep(
      ShellCommand(name = 'Configure LLVM',
                   description = 'Configure LLVM',
                   locks = [performance_lock.access('counting')],
                   workdir = 'llvm-build-' + config,
                   haltOnFailure = True,
                   command = ['cmake',
                              '-Thost=x64',
                              '-DCMAKE_INSTALL_PREFIX=../llvm-install-' + config,
                              '-DLLVM_ENABLE_TERMINFO=OFF',
                              '-DLLVM_TARGETS_TO_BUILD=X86;ARM;NVPTX;AArch64;Mips;Hexagon;PowerPC',
                              '-DLLVM_ENABLE_ASSERTIONS=ON',
                              '-DLLVM_BUILD_32_BITS=' + build_32_bits,
                              '-DCMAKE_BUILD_TYPE=' + config,
                              '../llvm/',
                              '-G',
                              project_type]))

    factory.addStep(
      ShellCommand(workdir = 'llvm-build-' + config,
                   locks = [performance_lock.access('counting')],
                   name = 'Build LLVM ' + config,
                   description = 'Build LLVM ' + config,
                   haltOnFailure = True,
                   command = ['MSBuild.exe',
                              '/m:16',
                              '/t:Build',
                              '/p:Configuration=' + config,
                              '.\\INSTALL.vcxproj']))

    factory.addStep(
      ShellCommand(name = 'Configure Halide ' + config,
                   description = 'Configure Halide ' + config,
                   locks = [performance_lock.access('counting')],
                   workdir = 'halide-build-' + config,
                   haltOnFailure = True,
                   command = ['cmake',
                              '-Thost=x64',
                               Interpolate('-DLLVM_DIR=%(prop:builddir)s\\llvm-install-' + config + '\\lib\\cmake\\llvm'),
                               '-DLLVM_VERSION=' + llvm_version,
                               '-DCMAKE_BUILD_TYPE=' + config,
                               '-G',
                               project_type,
                               '..\\halide']))
    factory.addStep(
      ShellCommand(name = 'Build Halide ' + config,
                   description = 'Build Halide ' + config,
                   locks = [performance_lock.access('counting')],
                   workdir = 'halide-build-' + config,
                   haltOnFailure = True,
                   command = ['MSBuild.exe',
                              '/m:16',
                              '/t:Build',
                              '/p:Configuration=' + config,
                              '.\\ALL_BUILD.vcxproj']))


  if make_distro:
    # Make and upload a distro
    factory.addStep(RemoveDirectory(dir = 'distrib', haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'distrib', haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'distrib\\halide', haltOnFailure = False))
    for d in ['Release', 'Debug', 'include', 'tools']:
      factory.addStep(MakeDirectory(dir = 'distrib\\halide\\' + d, haltOnFailure = False))

    file_pairs = [
        ('..\\halide-build-Release\\bin\\Release\\Halide.dll', 'Release'),
        ('..\\halide-build-Release\\lib\\Release\\Halide.lib', 'Release'),
        ('..\\halide-build-Debug\\bin\\Debug\\Halide.dll', 'Debug'),
        ('..\\halide-build-Debug\\lib\\Debug\\Halide.lib', 'Debug'),
        ('..\\halide-build-Release\\include\\Halide.h', 'include'),
        ('..\\halide\\src\\runtime\\HalideRuntim*.h', 'include'),
        ('..\\halide\\src\\runtime\\HalideBuffer.h', 'include'),
        ('..\\halide\\tools\\mex_halide.m', 'tools'),
        ('..\\halide\\tools\\halide_image_io.h', 'tools'),
        ('..\\halide\\tools\\GenGen.cpp', 'tools'),
        ('..\\halide\\README.md', '.')]
    for (file, dir) in file_pairs:
      factory.addStep(
        ShellCommand(name = 'Copying ' + file,
                     workdir = 'distrib',
                     command = ['copy', file, 'halide\\' + dir + '\\']))

    factory.addStep(
      ShellCommand(name = 'Zipping distribution',
                   workdir = 'distrib',
                   command = ['C:\\Program Files\\7-Zip\\7z.exe',
                              'a',
                              'halide.zip',
                              'halide']))

    factory.addStep(
      FileUpload(workersrc = 'halide.zip',
                 workdir = 'distrib',
                 mode = 0644,
                 masterdest = get_distrib_name))
  else:
    # Run the tests
    env = {}
    for hl_target in ['host', 'host-opencl', 'host-cuda']:
      target_env = env.copy()
      target_env['HL_TARGET'] = hl_target
      target_env['HL_JIT_TARGET'] = hl_target
      factory.addStep(
        ShellCommand(name = 'correctness',
                     description = 'correctness',
                     locks = [performance_lock.access('counting')],
                     workdir = 'halide-build-Release',
                     env = target_env,
                     timeout = 3600,
                     command = ['cmd', '/c',
                                'for', '%i', 'in', '(bin\\Release\\correctness*.exe)', 'do', '(%i)']))
      factory.addStep(
        ShellCommand(name = 'performance',
                     description = 'performance',
                     locks = [performance_lock.access('exclusive')],
                     workdir = 'halide-build-Release',
                     env = target_env,
                     timeout = 3600,
                     command = ['cmd', '/c',
                                'for', '%i', 'in', '(bin\\Release\\performance*.exe)', 'do', '(%i)']))
      factory.addStep(
        ShellCommand(name = 'generators',
                     description = 'generators',
                     locks = [performance_lock.access('counting')],
                     workdir = 'halide-build-Release',
                     env = target_env,
                     timeout = 3600,
                     command = ['cmd', '/c',
                                'for', '%i', 'in', '(bin\\Release\\generator*.exe)', 'do', '(%i)']))

  return factory


def create_builder(os, llvm):
  factory = create_factory(os, llvm)

  tags = os.split('-')
  tags.append('llvm-' + llvm)
  if 'testbranch' not in tags:
    tags.append('master')

  builder = BuilderConfig(name = os + '-' + llvm,
                          workernames = get_workers(os),
                          factory = factory,
                          tags = tags)

  builder.llvm = llvm
  builder.os = os

  c['builders'].append(builder)

def create_scheduler(llvm):

  def master_only(b):
    return b == 'master' or b is None

  def not_master(b):
    return not master_only(b)

  builders = [str(b.name) for b in c['builders'] if b.llvm == llvm and 'testbranch' not in b.name]
  scheduler = SingleBranchScheduler(
      name = 'halide-' + llvm,
      codebases = ['halide', 'llvm-' + llvm, 'clang-' + llvm],
      change_filter = filter.ChangeFilter(branch_fn = master_only),
      treeStableTimer = 60*5, # seconds
      builderNames = builders)

  c['schedulers'].append(scheduler)

  builders = [str(b.name) for b in c['builders'] if b.llvm == llvm and 'testbranch' in b.name]
  if builders:
      scheduler = SingleBranchScheduler(
          name = 'halide-testbranch-' + llvm,
          codebases = ['halide', 'llvm-' + llvm, 'clang-' + llvm],
          change_filter = filter.ChangeFilter(branch_fn = not_master),
          treeStableTimer = 60*5, # seconds
          builderNames = builders)

      c['schedulers'].append(scheduler)

  builders = [str(b.name) for b in c['builders'] if b.llvm == llvm]
  scheduler = ForceScheduler(
    name = 'force-' + llvm,
    builderNames = builders,
    codebases = ['halide', 'llvm-' + llvm, 'clang-' + llvm])

  c['schedulers'].append(scheduler)

c['builders'] = []
create_builder('arm32-linux-32', 'trunk')
create_builder('arm64-linux-64', 'trunk')
for gcc in ['gcc48', 'gcc49', 'gcc51', 'gcc52', 'gcc53']:
    create_builder('linux-32-' + gcc, 'trunk')
    create_builder('linux-64-' + gcc, 'trunk')

create_builder('linux-32-gcc53', '391')
create_builder('linux-32-gcc53', '401')
create_builder('linux-32-gcc53', '500')
create_builder('linux-64-gcc53', '391')
create_builder('linux-64-gcc53', '401')
create_builder('linux-64-gcc53', '500')

create_builder('mac-32', 'trunk')
create_builder('mac-32', '391')
create_builder('mac-32', '401')
create_builder('mac-32', '500')
create_builder('mac-64', 'trunk')
create_builder('mac-64', '391')
create_builder('mac-64', '401')
create_builder('mac-64', '500')
create_builder('win-32', 'trunk')
create_builder('win-64', 'trunk')
create_builder('win-32-distro', 'trunk')
create_builder('win-64-distro', 'trunk')
create_builder('mingw-64', 'trunk')

# Make some builders just for testing branches. Picking a fixed llvm version will avoid LLVM rebuilds for the best turnaround.
create_builder('win-64-testbranch', '401')
create_builder('win-32-testbranch', '401')
create_builder('mac-64-testbranch', '401')
create_builder('mac-32-testbranch', '401')
create_builder('linux-64-gcc53-testbranch', '401')
create_builder('linux-32-gcc53-testbranch', '401')
create_builder('mingw-64-testbranch', '401')
create_builder('arm64-linux-64-testbranch', '401')
create_builder('arm32-linux-32-testbranch', '401')
# Check for build breakages against other llvm versions too
create_builder('linux-64-gcc53-testbranch', '500')
create_builder('linux-64-gcc53-testbranch', 'trunk')

# Don't try to build every single commit

@defer.inlineCallbacks
def collapseRequests(master, builder, req1, req2):
    "any requests with the same branch can be merged"

    # get the buildsets for each buildrequest
    selfBuildset , otherBuildset = yield defer.gatherResults([
        master.data.get(('buildsets', req1['buildsetid'])),
        master.data.get(('buildsets', req2['buildsetid']))
    ])
    selfSourcestamps = selfBuildset['sourcestamps']
    otherSourcestamps = otherBuildset['sourcestamps']

    if len(selfSourcestamps) != len(otherSourcestamps):
        defer.returnValue(False)

    for selfSourcestamp, otherSourcestamp in zip(selfSourcestamps, otherSourcestamps):
        if selfSourcestamp['branch'] != otherSourcestamp['branch']:
            defer.returnValue(False)

    defer.returnValue(True)

c['collapseRequests'] = collapseRequests

c['schedulers'] = []
create_scheduler('trunk')
create_scheduler('500')
create_scheduler('401')
create_scheduler('391')

# Create a scheduler to force a test of a branch
builders = [str(b.name) for b in c['builders'] if 'testbranch' in b.name]
scheduler = ForceScheduler(
  name = 'testbranch',
  builderNames = builders,
  codebases = ['halide',
               'llvm-500',
               'clang-500',
               'llvm-401',
               'clang-401',
               'llvm-trunk',
               'clang-trunk'])
c['schedulers'].append(scheduler)

# Set the builder priorities
def prioritize_builders(master, builders):
  def importance(builder):
    # gccs other than 5.3 are just for making distros. They don't need
    # frequent testing.
    if 'gcc' in builder.name and 'gcc53' not in builder.name: return 6
    # Similarly deprioritize the windows distro-builders
    if '-distro' in builder.name: return 6
    # 32-bit is also less important than getting immediate feedback on 64-bit.
    if '-32' in builder.name: return 5
    # Order llvm versions by age
    if '391' in builder.name: return 4
    if '401' in builder.name: return 3
    if '500' in builder.name: return 2
    # These builders are the highest priority
    if 'testbranch' in builder.name: return 0
    return 1

  builders.sort(key = importance)

  return builders

c['prioritizeBuilders'] = prioritize_builders

####### WEB SERVER

password = open('buildbot_www_pass.txt').read().strip()

authz = util.Authz(
      allowRules=[util.ForceBuildEndpointMatcher(role="admins"),
                  util.StopBuildEndpointMatcher(role="admins"),
                  util.RebuildBuildEndpointMatcher(role="admins"),
                  util.EnableSchedulerEndpointMatcher(role="admins")],
      roleMatchers=[util.RolesFromUsername(roles=["admins"], usernames=["halidenightly"])])

c['www'] = dict(
    auth = util.UserPasswordAuth({'halidenightly': password}),
    authz = authz,
    port = 8012,
    plugins = dict(
        waterfall_view = {},
        console_view = {}
    )
)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'Halide'
c['titleURL'] = 'http://halide-lang.org'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'https://buildbot.halide-lang.org/master/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}

###### GitHub Integration

from buildbot.plugins import reporters

builders = [str(b.name) for b in c['builders']]
builders = [b for b in builders if ('linux' not in b or 'gcc53' in b) and 'distro' not in b]
gs = reporters.GitHubStatusPush(token = token,
                                context = Interpolate("buildbot/%(prop:buildername)s"),
                                startDescription = 'Build started.',
                                endDescription = 'Build done.',
                                verbose = True,
                                builders = builders)
c['services'] = [gs]
