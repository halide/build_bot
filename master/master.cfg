# -*- python -*-
# ex: set syntax=python:

import os
import re
from collections import defaultdict
from enum import Enum
from functools import partial
from pathlib import Path

from buildbot.changes.github import GitHubPullrequestPoller
from buildbot.changes.gitpoller import GitPoller
from buildbot.config import BuilderConfig
from buildbot.plugins import reporters
from buildbot.plugins import schedulers, util
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.process.properties import renderer
from buildbot.steps.cmake import CMake
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.shell import SetPropertyFromCommand
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git
from buildbot.steps.transfer import FileUpload
from buildbot.steps.worker import MakeDirectory
from buildbot.steps.worker import RemoveDirectory
from buildbot.worker import Worker

# At any given time, we test (at least) 3 LLVM versions:
# - the current trunk (changes daily)
# - the most recent release (expected to be stable)
# - an older release (expected to be stable)
#
# the branches that correspond to these will rotate as new versions
# are released, but the underlying test logic should not need changing

LLVM_TRUNK_BRANCH = 'master'
LLVM_RELEASE_BRANCH = 'release/11.x'
LLVM_OLD_BRANCH = 'release/10.x'

_LLVM_BRANCHES = [LLVM_TRUNK_BRANCH, LLVM_RELEASE_BRANCH, LLVM_OLD_BRANCH]

_TO_VERSION = {
    LLVM_TRUNK_BRANCH: 12,
    LLVM_RELEASE_BRANCH: 11,
    LLVM_OLD_BRANCH: 10,
}


def to_name(llvm_branch):
    return '%d' % _TO_VERSION[llvm_branch]


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# BUILDWORKERS

# The 'workers' list defines the set of recognized buildworkers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

password = Path('halide_bb_pass.txt').read_text().strip()

_WORKERS = [
    ('linux-worker-2', 2),
    ('linux-worker-3', 2),
    ('mac-worker-1', 2),
    ('arm32-linux-worker-1', 1),
    ('arm32-linux-worker-2', 1),
    ('arm64-linux-worker-1', 1),
    ('arm64-linux-worker-2', 1),
    ('win-worker-1', 1),
    ('win-worker-2', 1),
]

c['workers'] = [Worker(n, password, max_builds=mb) for n, mb in _WORKERS]

# 'protocols' contains information about protocols which master will use for
# communicating with workers.
# You must define at least 'port' option that workers could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildworkers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9990}}

# LOCKS

# Performance testing requires exclusive use of a worker

# Compute-intensive build steps will grab this lock in reader
# mode. The performance test will grab it in exclusive mode.
performance_lock = util.WorkerLock("performance_lock",
                                   maxCount=9999)

# When building the LLVM nightlies, we can sync & build LLVM independently
# from other work, but when we update the install directory, we need to ensure
# we have an exclusive lock across the entire worker. (Since we have a small
# number of LLVM versions, and since 'make install' doesn't take very long,
# we could probably just get by with a single lock for *any* llvm install,
# but this isn't much harder to do.)
llvm_build_locks = {}
for llvm_branch in _LLVM_BRANCHES:
    llvm_build_locks[llvm_branch] = util.WorkerLock("llvm_install_lock_%s" % to_name(llvm_branch),
                                                    maxCount=9999)

# CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of halide.

c['change_source'] = []

token = Path('github_token.txt').read_text().strip()

c['change_source'].append(GitPoller(
    repourl='git://github.com/halide/Halide.git',
    workdir='gitpoller-halide-workdir',
    branch='master',
    pollInterval=60 * 5,  # Check Halide master every five minutes
    pollAtLaunch=True))


def pr_filter(pr):
    # Auto test anything in the halide master repo
    # print("Considering PR: ", pr['title'], pr['html_url'])
    # for (k, v) in pr.items():
    #     print(k, v)
    repo = pr['head']['repo']
    result = repo is not None and repo['full_name'] == 'halide/Halide'
    reviewers = pr['requested_reviewers']
    if reviewers is not None:
        for r in reviewers:
            result = result or (r['login'] == 'halidebuildbots')
    # Any PR labeled with 'skip_buildbots' should be skipped
    labels = pr['labels']
    if labels is not None:
        for lbl in labels:
            if lbl['name'] == 'skip_buildbots':
                result = False
    print("Testing PR : ", pr['title'], pr['html_url'], ' => ', result)
    return result


c['change_source'].append(GitHubPullrequestPoller(
    owner='halide',
    repo='Halide',
    token=token,
    pullrequest_filter=pr_filter,
    pollInterval=60 * 5,  # Check Halide PRs every five minutes
    pollAtLaunch=True))

c['change_source'].append(GitPoller(
    repourl='https://github.com/llvm/llvm-project.git',
    workdir='gitpoller-llvm-workdir',
    branch=LLVM_TRUNK_BRANCH,
    pollInterval=60 * 60 * 24,  # Only check llvm once every 24 hours
    pollAtLaunch=True))

# CODEBASES

all_repositories = {
    r'git://github.com/halide/Halide.git': 'halide',
    'https://github.com/halide/Halide.git': 'halide',
    r'git://github.com/llvm/llvm-project.git': 'llvm',
    'https://github.com/llvm/llvm-project.git': 'llvm',
}


def codebase_generator(chdict):
    repo = chdict['repository']
    assert repo in all_repositories, "Codebase not found for chdict: " + str(chdict)
    return all_repositories[repo]


c['codebaseGenerator'] = codebase_generator


# BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.


class Purpose(Enum):
    halide_main = 1
    halide_testbranch = 2
    llvm_nightly = 3


class BuilderType:
    """A class to encapsulate the settings for a specific Builder.
       (Do not confuse with CMake's 'BUILD_TYPE', which is something else.)

       It includes:
       - Halide 'target' in the form of arch-bits-os
       - LLVM branch to be used
       - CMake vs Make
       - main-branch vs testbranch vs llvm-nightly

       It doesn't currently include any 'features' because we don't currently
       bake any in at build time.

       It doesn't currently include the C++ compiler used (eg gcc7 vs gcc8 vs clang),
       mainly because we currently never test with multiple compilers for a given
       setup. (If we ever need to do so, compiler should be added to this.)
    """

    def __init__(self, arch, bits, os, llvm_branch, purpose, cmake=True):
        assert arch in ['arm', 'x86']
        assert bits in [32, 64]
        assert os in ['linux', 'windows', 'osx']
        assert llvm_branch in _LLVM_BRANCHES

        self.arch = arch
        self.bits = bits
        self.os = os
        self.llvm_branch = llvm_branch
        self.cmake = cmake
        self.purpose = purpose

    # The armbots aren't configured with Python at all,
    # and supporting 32-bit Python on our 64-bit buildbots is painful
    # (and usage of the python bindings on 32-bit hosts is unlikely anyway)
    def handles_python(self):
        return self.arch != 'arm' and self.bits != 32

    def handles_hexagon(self):
        return (self.arch == 'x86'
                and self.bits == 64
                and self.os == 'linux'
                and self.llvm_branch == LLVM_TRUNK_BRANCH)

    def handles_wasm(self):
        return (self.arch == 'x86'
                and self.bits == 64
                and self.os == 'linux'
                and self.llvm_branch == LLVM_TRUNK_BRANCH)

    def has_nvidia(self):
        return (self.arch == 'x86'
                and self.bits == 64
                and (self.os == 'linux' or self.os == 'windows'))

    def halide_target(self):
        return '%s-%d-%s' % (self.arch, self.bits, self.os)

    def llvm_builder_label(self):
        return 'llvm-%s-%s' % (to_name(self.llvm_branch), self.halide_target())

    def halide_builder_label(self):
        # This currently tries to (somewhat) mimic the existing label pattern,
        # but is arbitrary. (If changed, manual purging of buildbot temporaries
        # is appropriate)
        s = self.halide_target()
        if self.purpose == Purpose.halide_testbranch:
            s += '-testbranch'
        s += '-' + to_name(self.llvm_branch)
        s += '-cmake' if self.cmake else '-make'
        return s

    def builder_label(self):
        if self.purpose == Purpose.llvm_nightly:
            return self.llvm_builder_label()
        else:
            return self.halide_builder_label()

    def builder_tags(self):
        tags = self.builder_label().split('-')
        if self.purpose == Purpose.halide_main:
            tags.append('master')
        return tags

    def get_worker_names(self):
        if self.os == 'linux':
            if self.arch == 'x86':
                return [n for n, mb in _WORKERS if n.startswith('linux-worker')]

            if self.arch == 'arm':
                if self.bits == 32:
                    return [n for n, mb in _WORKERS if n.startswith('arm32-linux-worker')]
                else:
                    return [n for n, mb in _WORKERS if n.startswith('arm64-linux-worker')]

        if self.os == 'osx':
            return [n for n, mb in _WORKERS if n.startswith('mac-worker')]

        if self.os == 'windows':
            return [n for n, mb in _WORKERS if n.startswith('win-worker')]

        assert False

    def __str__(self):
        return '%s' % (self.halide_target())


class InterpolateAndFixSlashes(Interpolate):
    """Interpolate followed by replacing \\ with /
    """

    def __init__(self, fmtstring, *args, **kwargs):
        Interpolate.__init__(self, fmtstring, *args, **kwargs)

    def _sub(self, s):
        return s.replace('\\', '/')

    def getRenderingFor(self, props):
        props = props.getProperties()
        if self.args:
            d = props.render(self.args)
            d.addCallback(lambda args:
                          self._sub(self.fmtstring % tuple(args)))
            return d
        else:
            d = props.render(self.interpolations)
            d.addCallback(lambda res:
                          self._sub(self.fmtstring % res))
            return d


def get_builddir_subpath(subpath):
    return InterpolateAndFixSlashes('%(prop:builddir)s/' + subpath)


# TODO: make private to the LLVM code


def get_llvm_source_path(*subpaths):
    return get_builddir_subpath(os.path.join('llvm-project', *subpaths))


# TODO: make private to the LLVM code
def get_llvm_build_path(*subpaths):
    return get_builddir_subpath(os.path.join('llvm-build', *subpaths))


def get_llvm_install_path(builder_type, *subpaths):
    # Note that `builder_type.purpose` can be a Halide builder or an LLVM builder;
    # we want to ignore that aspect and produce the same effective path
    # regardless (ie, based only on the other aspects of the builder_type).
    llvm_workdir = builder_type.llvm_builder_label()
    return get_builddir_subpath(os.path.join('..', llvm_workdir, 'llvm-install', *subpaths))


def get_halide_source_path(*subpaths):
    return get_builddir_subpath(os.path.join('halide-source', *subpaths))


def get_halide_build_path(*subpaths):
    return get_builddir_subpath(os.path.join('halide-build', *subpaths))


def get_halide_install_path(*subpaths):
    return get_builddir_subpath(os.path.join('halide-install', *subpaths))


def add_get_halide_source_steps(factory, builder_type):
    factory.addStep(Git(name='Get Halide source',
                        locks=[performance_lock.access('counting')],
                        codebase='halide',
                        workdir=get_halide_source_path(),
                        repourl='git://github.com/halide/Halide.git',
                        branch='master',
                        mode='incremental'))


def add_get_llvm_source_steps(factory, builder_type):
    # LLVM 10 is broken under MSVC 16.7.x as of October 2020.
    # Until a fix is backported, use the same grotesque hack that MS itself
    # is using for vcpkg: https://github.com/microsoft/vcpkg/pull/12884
    if builder_type.llvm_branch == 'release/10.x' and builder_type.os == 'windows':
        # The Git() step will include a `git reset --hard HEAD`,
        # which means this file is reverted and re-patched every time,
        # meaning we have to recompile (essentially) all of LLVM since
        # the timestamp on this one file gets touched. Since this is an awful
        # (and hopefully temporary) hack anyway, we'll just do our own thing for
        # this case...
        factory.addStep(ShellCommand(
            name='Get LLVM 10 (special)',
            locks=[performance_lock.access('counting')],
            haltOnFailure=True,
            workdir=get_llvm_source_path(),
            command="git fetch -t https://github.com/llvm/llvm-project.git release/10.x --progress && " +
                    "git checkout -B release/10.x"))

        type_traits_h = 'llvm/include/llvm/Support/type_traits.h'
        factory.addStep(ShellCommand(
            name='Patch LLVM 10',
            locks=[performance_lock.access('counting')],
            haltOnFailure=True,
            workdir=get_llvm_source_path(),
            # - Emit as a string (rather than array) to avoid Buildbot escaping issues.
            # - Use `grep && sed` approach to avoid sed changing the
            # timestamp on an already-patched file.
            command=f"grep HAVE_STD_IS_TRIVIALLY_COPYABLE {type_traits_h} && " +
                    f"sed -i 's/#ifdef HAVE_STD_IS_TRIVIALLY_COPYABLE/#if 0/g' {type_traits_h} || " +
                    "true"))
    else:
        factory.addStep(Git(name='Get LLVM ' + to_name(builder_type.llvm_branch),
                            locks=[performance_lock.access('counting')],
                            codebase='llvm',
                            workdir=get_llvm_source_path(),
                            repourl='https://github.com/llvm/llvm-project.git',
                            branch=builder_type.llvm_branch,
                            mode='incremental'))


# Determined by running `set` in cmd.exe before and after vcvarsall.bat
# and diffing the output. It's likely that we don't need all of these
# to make things work, but I haven't bothered to figure out what is irrelevant,
# so I'm erring on the side of maybe too much.
# noinspection SpellCheckingInspection
VCVARSALL_ENV_VARS = [
    "COMMANDPROMPTTYPE",
    "DEVENVDIR",
    "EXTENSIONSDKDIR",
    "FRAMEWORK40VERSION",
    "FRAMEWORKDIR",
    "FRAMEWORKDIR64",
    "FRAMEWORKVERSION",
    "FRAMEWORKVERSION64",
    "INCLUDE",
    "LIB",
    "LIBPATH",
    "NETFXSDKDIR",
    "PATH",
    "PLATFORM",
    "UCRTVERSION",
    "UNIVERSALCRTSDKDIR",
    "VCIDEINSTALLDIR",
    "VCINSTALLDIR",
    "VCTOOLSINSTALLDIR",
    "VCTOOLSREDISTDIR",
    "VCTOOLSVERSION",
    "VISUALSTUDIOVERSION",
    "VS110COMNTOOLS",
    "VS120COMNTOOLS",
    "VS140COMNTOOLS",
    "VS160COMNTOOLS",
    "VSCMD_ARG_APP_PLAT",
    "VSCMD_ARG_HOST_ARCH",
    "VSCMD_ARG_TGT_ARCH",
    "VSCMD_VER",
    "VSINSTALLDIR",
    "WINDOWSLIBPATH",
    "WINDOWSSDKBINPATH",
    "WINDOWSSDKDIR",
    "WINDOWSSDKLIBVERSION",
    "WINDOWSSDKVERBINPATH",
    "WINDOWSSDKVERSION",
    "WINDOWSSDK_EXECUTABLEPATH_X64",
    "WINDOWSSDK_EXECUTABLEPATH_X86",
    "__DOTNET_ADD_64BIT",
    "__DOTNET_PREFERRED_BITNESS",
    "__VSCMD_PREINIT_PATH",
    "__VSCMD_SCRIPT_ERR_COUNT",
]


def get_msvc_config_steps(factory, builder_type):
    if builder_type.os == 'windows':
        if builder_type.bits == 32:
            vcvars_arch = ' x64_x86'  # ensure that we use the x64 host compiler, not the x86 host compiler
        else:
            vcvars_arch = ' x64'
        vcvarsall = 'vcvarsall.bat %s && set' % vcvars_arch

        # TODO: surely there is a better way of locating vcvarsall
        vcvarsdir = "c:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build"

        # `vsvarsall && set` dumps all the settings to stdout;
        # we'll extract & save just the subset we think are likely to be relevant.
        def save_interesting_env_vars(rc, stdout, stderr):
            d = {}
            for line in stdout.split('\n'):
                match = re.match("^([a-zA-Z0-9_-]+)=(.*)$", line.strip())
                if match:
                    key = match.group(1).upper()
                    value = match.group(2)
                    if key in VCVARSALL_ENV_VARS:
                        d["_HALIDE_VCVAR_%s" % key] = value
            return d

        factory.addStep(
            SetPropertyFromCommand(name='Run VcVarsAll',
                                   description='Run VcVarsAll',
                                   workdir=vcvarsdir,
                                   locks=[performance_lock.access('counting')],
                                   haltOnFailure=True,
                                   command=vcvarsall,
                                   extract_fn=save_interesting_env_vars))


@renderer
def get_distrib_name(props, version, target, ext):
    # Note that this property is a dict for multi-codebase builds,
    # but just a string for single-codebase builds.
    rd = props.getProperty('got_revision')
    if type(rd) is dict:
        rev = rd['halide']
    else:
        rev = rd

    builder_label = props.getProperty('buildername')

    # Always upload to /home/abadams/artifacts -- regardless of user --
    # since that's where the public-facing webpage looks
    upload_name = 'Halide-%s-%s-%s.%s' % (version, target, rev, ext)
    upload_path = '/home/abadams/artifacts/%s' % upload_name

    print("Uploading distrib from builder %s to %s" % (builder_label, upload_path))

    return upload_path


def get_cmake_generator(builder_type):
    return 'Ninja'


def get_cmake_options(builder_type):
    options = []
    return options


def get_halide_cmake_definitions(builder_type, halide_target='host'):
    cmake_definitions = {
        'Clang_DIR': get_llvm_install_path(builder_type, 'lib/cmake/clang'),
        'CMAKE_INSTALL_PREFIX': get_halide_install_path(),
        'CMAKE_BUILD_TYPE': 'Release',
        'Halide_TARGET': halide_target,
        'LLVM_DIR': get_llvm_install_path(builder_type, 'lib/cmake/llvm'),
        'WITH_PYTHON_BINDINGS': 'ON' if builder_type.handles_python() else 'OFF'
    }

    # The linux and arm linux buildbots have ccache installed
    # (TODO: can install on mac if we update XCode there)
    if builder_type.os == 'linux':
        cmake_definitions['CMAKE_C_COMPILER_LAUNCHER'] = 'ccache'
        cmake_definitions['CMAKE_CXX_COMPILER_LAUNCHER'] = 'ccache'

    # TODO: is this even necessary? We no longer attempt to build/test Python
    # on any 32-bit system
    # if builder_type.os == 'windows' and builder_type.bits == 32:
    #     cmake_definitions['Python3_ROOT_DIR'] = r'C:/Program Files (x86)/Python38-32'

    if builder_type.os == 'windows':
        cmake_definitions['CMAKE_TOOLCHAIN_FILE'] = r'C:/vcpkg/scripts/buildsystems/vcpkg.cmake'

    return cmake_definitions


def get_cmake_build_command(builder_type, build_dir, targets=None):
    cmd = ['ninja',
           '-C', build_dir,
           '-j', get_build_parallelism(builder_type)]
    if targets:
        cmd += targets

    # Since everything is using Ninja right now, we just call it directly;
    # if we ever find the need to go back to bottlenecking thru CMake,
    # here's the cmd we need:
    #
    # cmd = ['cmake',
    #        '--build', build_dir,
    #        '--config', 'Release',
    #        '-j', get_build_parallelism(builder_type)]
    # if target:
    #     cmd.extend(['--target', target])

    return cmd


def get_llvm_cmake_definitions(builder_type):
    definitions = {
        'CMAKE_BUILD_TYPE': 'Release',
        'CMAKE_INSTALL_PREFIX': get_llvm_install_path(builder_type),
        'LLVM_BUILD_32_BITS': ('ON' if builder_type.bits == 32 else 'OFF'),
        'LLVM_ENABLE_ASSERTIONS': 'ON',
        'LLVM_ENABLE_LIBXML2': 'OFF',
        'LLVM_ENABLE_PROJECTS': 'clang;lld',
        'LLVM_ENABLE_RTTI': 'ON',
        'LLVM_ENABLE_TERMINFO': 'OFF',
        'LLVM_TARGETS_TO_BUILD': 'X86;ARM;NVPTX;AArch64;Mips;Hexagon;PowerPC;WebAssembly',
    }

    if builder_type.arch == 'x86' and builder_type.bits == 32 and builder_type.os == 'linux':
        definitions['CMAKE_FIND_ROOT_PATH'] = '/usr/lib/i386-linux-gnu'
        definitions['CMAKE_FIND_ROOT_PATH_MODE_LIBRARY'] = 'ONLY'

    # This disables an XCode setting that can get enabled by default
    # when assertions are enabled, but only if your XCode install has
    # certain frameworks installed; we want it disabled, as it prevents
    # prebuilt libraries from working properly with XCode 9.x.
    if builder_type.os == 'osx':
        definitions['LLVM_ENABLE_SUPPORT_XCODE_SIGNPOSTS'] = 'FORCE_OFF'

    return definitions


def get_env(builder_type):
    cxx = 'c++'
    cc = 'cc'
    ld = 'ld'

    if builder_type.arch == 'x86' and builder_type.os == 'linux':
        cc = 'gcc-7'
        cxx = 'g++-7'
        ld = 'ld'
        if builder_type.bits == 32:
            cxx += ' -m32'
            cc += ' -m32'
            ld += ' -melf_i386'
    elif builder_type.os == 'windows':
        cxx = 'cl.exe'
        cc = 'cl.exe'

    # The linux and arm linux buildbots have ccache installed
    # (TODO: can install on mac if we update XCode there)
    if builder_type.os == 'linux':
        cxx = 'ccache ' + cxx
        cc = 'ccache ' + cc

    env = {
        'CC': cc,
        'CXX': cxx,
        'LD': ld,
    }

    if builder_type.handles_hexagon():
        # Environment variables for testing Hexagon DSP
        # Can't use get_halide_source_path() here because Interpolate doesn't work properly
        hexagon_remote_bin = os.path.join('${PWD}/worker',
                                          builder_type.builder_label(),
                                          'halide-source/src/runtime/hexagon_remote/bin')
        env['HL_HEXAGON_TOOLS'] = '/usr/local/hexagon'
        env['HL_HEXAGON_SIM_REMOTE'] = os.path.join(hexagon_remote_bin, 'v62/hexagon_sim_remote')
        env['HL_HEXAGON_SIM_CYCLES'] = '1'
        env['LD_LIBRARY_PATH'] = ':'.join(['${LD_LIBRARY_PATH}',
                                           os.path.join(hexagon_remote_bin, 'host'),
                                           '/usr/local/hexagon/lib/iss'])

    if builder_type.os == 'osx':
        # Environment variable for turning on Metal API validation
        # This will have no effect on CPU testing, just Metal testing
        env['METAL_DEVICE_WRAPPER_TYPE'] = '1'

    if builder_type.os == 'windows':
        env['VCPKG_ROOT'] = 'C:/vcpkg'

        # Current NVidia drivers on our Windows buildbots can corrupt their own
        # cache, leading to many spurious failures. Disable the cache
        # for now, pending NVidia investigation.
        env['CUDA_CACHE_DISABLE'] = '1'

        # We don't ever want an Abort, Rerty, Ignore dialog in our tests
        env['HL_DISABLE_WINDOWS_ABORT_DIALOG'] = '1'

        # Add all the env vars that we slurped from calling vcvarsall
        # and stashed as properties
        for key in VCVARSALL_ENV_VARS:
            env[key] = Interpolate("%(prop:_HALIDE_VCVAR_" + key + ")s")

    return env


def get_build_parallelism(builder_type):
    # Standard wisdom is (nproc+2)
    if builder_type.os == 'linux':
        if builder_type.arch == 'x86':
            # TODO: our Linux bots also have 12 cores; this seems maybe too high?
            return 8
        else:
            assert builder_type.arch == 'arm'
            return 2
    elif builder_type.os == 'osx':
        # MacBot has 32GB and 6/12 core Xeon. We allow two builds at
        # once so set threads = (12/2)+2 == 8
        return 8
    elif builder_type.os == 'windows':
        # WinBots have 6/12 cores but are very slow.
        return 4
    else:
        assert False


@renderer
def get_llvm_latest_commit(props):
    # Note that this property is a dict for multi-codebase builds,
    # but just a string for single-codebase builds.
    build_dir = props.getProperty('builddir')
    assert type(build_dir) is not dict

    build_dir = build_dir.replace('\\', '/')
    # Can't use got_revision here since we may be using git directly.
    return "cd %s/llvm-project && git log -1 > %s/llvm-install/llvm_latest_commit.txt" % (build_dir, build_dir)


def add_llvm_steps(factory, builder_type, clean_rebuild):
    env = get_env(builder_type)
    build_dir = get_llvm_build_path()
    install_dir = get_llvm_install_path(builder_type)
    llvm_branch = builder_type.llvm_branch
    llvm_name = to_name(llvm_branch)

    if clean_rebuild:
        factory.addStep(RemoveDirectory(name="Remove LLVM %s Build Dir" % llvm_name,
                                        locks=[performance_lock.access('counting')],
                                        dir=build_dir,
                                        haltOnFailure=False))
        factory.addStep(RemoveDirectory(name="Remove LLVM %s Install Dir" % llvm_name,
                                        locks=[performance_lock.access('counting')],
                                        dir=install_dir,
                                        haltOnFailure=False))

    factory.addStep(MakeDirectory(name="Make LLVM %s Build Dir" % llvm_name,
                                  locks=[performance_lock.access('counting')],
                                  dir=build_dir,
                                  haltOnFailure=False))
    factory.addStep(MakeDirectory(name="Make LLVM %s Install Dir" % llvm_name,
                                  locks=[performance_lock.access('counting')],
                                  dir=install_dir,
                                  haltOnFailure=False))

    factory.addStep(
        CMake(name='Configure LLVM %s' % llvm_name,
              locks=[performance_lock.access('counting')],
              haltOnFailure=True,
              env=env,
              workdir=build_dir,
              path=get_llvm_source_path('llvm'),
              generator=get_cmake_generator(builder_type),
              definitions=get_llvm_cmake_definitions(builder_type),
              options=get_cmake_options(builder_type)))

    factory.addStep(
        ShellCommand(name='Build LLVM %s' % llvm_name,
                     locks=[performance_lock.access('counting')],
                     haltOnFailure=True,
                     workdir=build_dir,
                     env=env,
                     command=get_cmake_build_command(builder_type, build_dir, targets=['install'])))

    # Save the SHA of LLVM's head rev into ${INSTALL}/llvm_version.txt,
    # just to make debugging simpler
    #
    factory.addStep(
        ShellCommand(name='Stamp Install Directory for LLVM %s' % llvm_name,
                     locks=[performance_lock.access('counting')],
                     haltOnFailure=True,
                     workdir=get_llvm_source_path(),
                     env=env,
                     command=get_llvm_latest_commit))


def add_halide_cmake_build_steps(factory, builder_type):
    env = get_env(builder_type)

    # Always do a clean build for Halide
    source_dir = get_halide_source_path()
    build_dir = get_halide_build_path()
    install_dir = get_halide_install_path()
    factory.addStep(RemoveDirectory(name="Remove Halide Build Dir",
                                    locks=[performance_lock.access('counting')],
                                    dir=build_dir,
                                    haltOnFailure=False))
    factory.addStep(MakeDirectory(name="Make Halide Build Dir",
                                  locks=[performance_lock.access('counting')],
                                  dir=build_dir,
                                  haltOnFailure=False))

    factory.addStep(RemoveDirectory(name="Remove Halide Install Dir",
                                    locks=[performance_lock.access('counting')],
                                    dir=install_dir,
                                    haltOnFailure=False))
    factory.addStep(MakeDirectory(name="Make Halide Install Dir",
                                  locks=[performance_lock.access('counting')],
                                  dir=install_dir,
                                  haltOnFailure=False))

    factory.addStep(CMake(name='Configure Halide',
                          description='Configure Halide',
                          locks=[performance_lock.access('counting')],
                          haltOnFailure=True,
                          workdir=build_dir,
                          env=env,
                          path=source_dir,
                          generator=get_cmake_generator(builder_type),
                          definitions=get_halide_cmake_definitions(builder_type),
                          options=get_cmake_options(builder_type)))

    factory.addStep(
        ShellCommand(name='Build Halide',
                     description='Build Halide',
                     locks=[performance_lock.access('counting')],
                     haltOnFailure=True,
                     workdir=build_dir,
                     env=env,
                     command=get_cmake_build_command(builder_type, build_dir, targets=['all', 'install'])))


def add_halide_cmake_package_steps(factory, builder_type):
    source_dir = get_halide_source_path()

    # TODO: this is clumsy; we assume an integer version for llvm
    # and also assume the Halide version matches; this is sorta
    # true now (for Halide trunk) but needs more sophistication
    # once we make Halide release branches
    # https://github.com/halide/Halide/issues/5263
    version = '%s.0.0' % str(_TO_VERSION[builder_type.llvm_branch])
    target = builder_type.halide_target()
    ext = 'zip' if builder_type.os == 'windows' else 'tar.gz'
    pkg_name = 'Halide-%s-%s.%s' % (version, target, ext)

    env = get_env(builder_type)
    env['Clang_DIR'] = get_llvm_install_path(builder_type, 'lib/cmake/clang')
    env['LLVM_DIR'] = get_llvm_install_path(builder_type, 'lib/cmake/llvm')
    env['Halide_VERSION'] = version

    if builder_type.os == 'windows':
        # TODO: on Windows, we can't use Ninja for packaging (as we do everywhere
        # else in this cfg) due to a bug in CMake 3.18, so we must use MSBuild;
        # that means we must use a different build directory entirely. To simplify the
        # world, we make this a subdir of the real build dir (so it gets cleaned properly).
        # https://github.com/halide/Halide/issues/5264
        build_dir = get_halide_build_path("packaging_dir")

        # build_dir contains an Interpolate, so we can't just use os.path.join(build_dir, ...)
        pkg_path = get_halide_build_path("packaging_dir", pkg_name)

        if builder_type.arch == 'arm':
            arch = 'ARM' if builder_type.bits == 32 else 'ARM64'
        else:
            arch = 'Win32' if builder_type.bits == 32 else 'x64'
        cmd = [get_halide_source_path('tools/package-windows.bat'),
               source_dir, build_dir, arch]
    else:
        build_dir = get_halide_build_path()
        pkg_path = get_halide_build_path(pkg_name)
        cmd = [get_halide_source_path('tools/package-unix.sh'), source_dir, build_dir]

    factory.addStep(
        ShellCommand(name='Package Halide',
                     description='Package Halide',
                     workdir=build_dir,
                     env=env,
                     locks=[performance_lock.access('counting')],
                     haltOnFailure=True,
                     command=cmd))

    factory.addStep(
        FileUpload(name='Upload Halide package',
                   workersrc=pkg_path,
                   locks=[performance_lock.access('counting')],
                   haltOnFailure=True,
                   mode=0o644,
                   masterdest=get_distrib_name.withArgs(version, target, ext)))

    factory.addStep(MasterShellCommand(
        workdir='/home/abadams/artifacts',
        locks=[performance_lock.access('counting')],
        command=['bash', '/home/abadams/build_bot_new/clean_artifacts.sh']))


# Return a dict with halide-targets as the keys, and a list of test-labels for each value.
def get_test_labels(builder_type):
    targets = defaultdict(list)

    targets['host'].extend(['internal', 'correctness', 'generator',
                            'error', 'warning', 'apps', 'performance', 'tutorial'])

    # TODO: some JIT+generator tests are failing on arm32; disable for now
    # pending fixes (see https://github.com/halide/Halide/issues/4940)
    if builder_type.arch == 'arm' and builder_type.bits == 32 and builder_type.os == 'linux':
        targets['host'].remove('internal')
        targets['host'].remove('generator')

    if builder_type.handles_python():
        targets['host'].extend(['python'])

    # Test without SSE4.1 on all x86 systems
    if builder_type.arch == 'x86':
        t = 'x86-%d-%s' % (builder_type.bits, builder_type.os)
        targets[t].extend(['correctness'])
        # on x86-64, also test with SSE4.1 (but nothing else that 'host' might sniff)
        if builder_type.bits == 64:
            targets['%s-sse41' % t].extend(['correctness'])

    if builder_type.has_nvidia():
        targets['host-cuda'].extend(['correctness', 'generator', 'apps'])
        targets['host-opencl'].extend(['correctness', 'generator', 'apps'])
        targets['host-cuda-opencl'].extend(['correctness_multi_gpu'])
        if builder_type.os == 'windows':
            targets['host-d3d12compute'].extend(['correctness', 'generator', 'apps'])

    if builder_type.os == 'osx':
        # test metal on OS X
        targets['host-metal'].extend(['correctness', 'generator', 'apps'])

    if builder_type.handles_hexagon():
        # Also test hexagon using the simulator
        targets['host-hvx'].extend(['correctness', 'generator', 'apps'])

    if builder_type.handles_wasm():
        # Test WASM usage (only on LLVM trunk)
        # TODO: perhaps move this to the OSX buildbot as it is less heavily loaded
        targets['wasm-32-wasmrt-wasm_simd128-wasm_signext-wasm_sat_float_to_int'].extend(
            ['internal', 'correctness', 'generator', 'error', 'warning'])

    return targets


def is_time_critical_test(test):
    # Return true if the test label (or single-test name) is 'time critical' and must
    # be run with an exclusive lock on the buildbot (typically, performance tests)
    return test in ['performance']


def add_halide_cmake_test_steps(factory, builder_type):
    parallelism = get_build_parallelism(builder_type)

    labels = get_test_labels(builder_type)

    source_dir = get_halide_source_path()
    build_dir = get_halide_build_path()
    install_dir = get_halide_install_path()

    # Since we need to do at least a partial rebuild for each different target,
    # we want to group things by target. Do host first, followed by a key-sorted
    # order, to ensure predictability.
    keys = list(labels.keys())
    keys.remove('host')
    keys.sort()
    keys.insert(0, 'host')

    for halide_target in keys:
        env = get_env(builder_type)
        # HL_TARGET is now ignored by CMake builds, no need to set
        # (must specify -DHalide_TARGET to CMake instead)
        # env['HL_TARGET'] = halide_target
        env['HL_JIT_TARGET'] = halide_target

        factory.addStep(
            CMake(name='Reconfigure for Halide_TARGET=%s' % halide_target,
                  description='Reconfigure for Halide_TARGET=%s' % halide_target,
                  locks=[performance_lock.access('counting')],
                  haltOnFailure=True,
                  env=env,
                  workdir=build_dir,
                  path=source_dir,
                  generator=get_cmake_generator(builder_type),
                  definitions=get_halide_cmake_definitions(
                      builder_type, halide_target=halide_target),
                  options=get_cmake_options(builder_type)))

        factory.addStep(
            ShellCommand(name='Rebuild for Halide_TARGET=%s' % halide_target,
                         description='Rebuild Halide for Halide_TARGET=%s' % halide_target,
                         locks=[performance_lock.access('counting')],
                         haltOnFailure=True,
                         workdir=build_dir,
                         env=env,
                         command=get_cmake_build_command(builder_type, build_dir, targets=['all', 'install'])))

        test_labels = labels[halide_target]

        do_apps = 'apps' in test_labels
        if do_apps:
            test_labels.remove('apps')

        if not builder_type.handles_python():
            if 'python' in test_labels:
                test_labels.remove('python')

            # TODO : some of the apps require python, so we must skip them for now also
            do_apps = False

        parallel_test_labels = [
            test for test in test_labels if not is_time_critical_test(test)]
        exclusive_test_labels = [test for test in test_labels if is_time_critical_test(test)]

        if len(parallel_test_labels):
            test_set = '|'.join(parallel_test_labels)
            # Note that we pass cmd as a single string deliberately,
            # to avoid buildbot escaping issues with the | char
            cmd = ' '.join(['ctest',
                            '--build-config', 'Release',
                            '--output-on-failure',
                            '--label-regex', '"%s"' % test_set,
                            '--parallel', '%d' % parallelism])

            # Build up some special cases to exclude
            exclude_regex = []
            if builder_type.os == 'windows' or builder_type.os == 'linux':
                # TODO: disable lens_blur on windows for now due to
                # https://bugs.llvm.org/show_bug.cgi?id=46176
                # and also due to windows testbots having inadequate GPU RAM
                #
                # And also on Linux due to inadequate GPU RAM
                exclude_regex.append('interpolate')
                exclude_regex.append('lens_blur')
                exclude_regex.append('unsharp')

            if builder_type.os == 'windows':
                # TODO: disable lens_blur_filter on windows for now due to
                # https://github.com/halide/Halide/issues/5552
                exclude_regex.append('lens_blur_filter')

            if builder_type.os == 'linux' or builder_type.bits == 32:
                # TODO: disable tutorial_lesson_12_using_the_gpu (both C++ and python) on
                # linux and 32-bit
                exclude_regex.append('tutorial_lesson_12')

            if builder_type.arch == 'arm' or builder_type.bits == 32:
                # TODO: disable lesson_19 on arm32
                # https://github.com/halide/Halide/issues/5224
                exclude_regex.append('tutorial_lesson_19')

            if exclude_regex:
                cmd = cmd + ' --exclude-regex "%s"' % ('|'.join(exclude_regex))

            factory.addStep(
                ShellCommand(name='Test %s Halide_TARGET=%s' % (test_set, halide_target),
                             description='Test %s Halide_TARGET=%s' % (
                                 test_set, halide_target),
                             locks=[performance_lock.access('counting')],
                             workdir=build_dir,
                             env=env,
                             timeout=3600,
                             command=cmd))

        if len(exclusive_test_labels):
            test_set = '|'.join(exclusive_test_labels)
            # Note that we pass cmd as a single string deliberately,
            # to avoid buildbot escaping issues with the | char
            cmd = ' '.join(['ctest',
                            '--build-config', 'Release',
                            '--output-on-failure',
                            '--label-regex', '"%s"' % test_set])
            factory.addStep(
                ShellCommand(name='Test %s Halide_TARGET=%s' % (test_set, halide_target),
                             description='Test %s Halide_TARGET=%s' % (
                                 test_set, halide_target),
                             locks=[performance_lock.access('exclusive')],
                             workdir=build_dir,
                             env=env,
                             timeout=3600,
                             command=cmd))

        if do_apps:
            apps_build_dir = get_halide_build_path("apps")
            apps_source_dir = get_halide_source_path("apps")

            apps_cmake_defs = get_halide_cmake_definitions(builder_type, halide_target=halide_target)
            apps_cmake_defs['CMAKE_PREFIX_PATH'] = get_halide_install_path()
            factory.addStep(
                CMake(name='Configure apps for Halide_TARGET=%s' % halide_target,
                      description='Configure apps for Halide_TARGET=%s' % halide_target,
                      locks=[performance_lock.access('counting')],
                      haltOnFailure=True,
                      env=env,
                      workdir=apps_build_dir,
                      path=apps_source_dir,
                      generator=get_cmake_generator(builder_type),
                      definitions=apps_cmake_defs,
                      options=get_cmake_options(builder_type)))

            factory.addStep(
                ShellCommand(name='Build apps for Halide_TARGET=%s' % halide_target,
                             description='Build apps for Halide_TARGET=%s' % halide_target,
                             locks=[performance_lock.access('counting')],
                             haltOnFailure=True,
                             workdir=apps_build_dir,
                             env=env,
                             command=get_cmake_build_command(builder_type, apps_build_dir)))

            # Note: do *not* run the apps/ tests in parallel; many of them expect
            # to make full use of all cores, and running in parallel will just slow
            # things down.
            factory.addStep(
                ShellCommand(name='Test apps for Halide_TARGET=%s' % halide_target,
                             description='Test apps for Halide_TARGET=%s' % halide_target,
                             locks=[performance_lock.access('exclusive')],
                             workdir=apps_build_dir,
                             env=env,
                             timeout=3600,
                             command=['ctest',
                                      '--build-config', 'Release',
                                      '--output-on-failure',
                                      '--label-exclude', 'slow_tests']))


def create_halide_make_factory(builder_type):
    assert builder_type.os != 'windows'

    env = get_env(builder_type)
    env['LLVM_CONFIG'] = get_llvm_install_path(builder_type, 'bin/llvm-config')

    make_threads = get_build_parallelism(builder_type)
    build_dir = get_halide_build_path()

    factory = BuildFactory()

    # It's never necessary to use get_msvc_config_steps() for Make,
    # since we never use Make with MSVC

    add_get_halide_source_steps(factory, builder_type)

    # Force a full rebuild of Halide every time
    factory.addStep(RemoveDirectory(name="Remove Halide Build Dir",
                                    locks=[performance_lock.access('counting')],
                                    dir=build_dir))

    targets = [('build_tests', 'host')]

    labels = get_test_labels(builder_type)
    for halide_target in list(labels.keys()):

        # Make can't build/test WebAssembly via Make (only via CMake)
        if "wasm" in halide_target:
            continue

        for label in labels[halide_target]:
            if not builder_type.handles_python():
                if 'python' in label:
                    continue
                # TODO: some of the apps require python, so we must skip them for now also
                if 'apps' in label:
                    continue

            if builder_type.arch == 'arm' or builder_type.bits == 32:
                # TODO: disable test_tutorial on arm and 32-bit builds as well
                # (we really only need to disable lessons 12 & 19
                # but the Makefile doesn't allow for that granularity)
                #
                # https://github.com/halide/Halide/issues/5144
                # https://github.com/halide/Halide/issues/5224
                if 'tutorial' in label:
                    continue

            targets.append((label, halide_target))

    for (target, halide_target) in targets:
        target_env = env.copy()
        target_env['HL_TARGET'] = halide_target
        target_env['HL_JIT_TARGET'] = halide_target

        if is_time_critical_test(target):
            p = 1
            lock_mode = 'exclusive'
        else:
            p = make_threads
            lock_mode = 'counting'

        if target != 'build_tests':
            target = 'test_%s' % target

        factory.addStep(ShellCommand(name='make ' + target,
                                     description=target + ' ' + halide_target,
                                     locks=[performance_lock.access(lock_mode)],
                                     workdir=build_dir,
                                     env=target_env,
                                     haltOnFailure=False,
                                     command=['make',
                                              '-f', get_halide_source_path('Makefile'),
                                              '-j', p,
                                              target],
                                     timeout=3600))
    return factory


def create_halide_cmake_factory(builder_type):
    factory = BuildFactory()
    get_msvc_config_steps(factory, builder_type)
    add_get_halide_source_steps(factory, builder_type)
    add_halide_cmake_build_steps(factory, builder_type)
    add_halide_cmake_test_steps(factory, builder_type)

    # If everything else looks ok, build a distrib.
    if builder_type.purpose == Purpose.halide_main:
        add_halide_cmake_package_steps(factory, builder_type)

    return factory


def create_halide_factory(builder_type):
    if builder_type.cmake:
        return create_halide_cmake_factory(builder_type)
    else:
        return create_halide_make_factory(builder_type)


def get_interesting_halide_targets():
    for arch in ['arm', 'x86']:
        for bits in [32, 64]:
            for os in ['linux', 'osx', 'windows']:
                if arch == 'arm' and os != 'linux':
                    # arm is linux-only for now
                    continue
                if os == 'osx' and bits != 64:
                    # osx is 64-bit only, period
                    continue
                yield arch, bits, os


def create_halide_builder(arch, bits, os, llvm_branch, purpose, cmake=True):
    builder_type = BuilderType(arch, bits, os, llvm_branch, purpose, cmake=cmake)
    workers = builder_type.get_worker_names()
    builder = BuilderConfig(name=builder_type.builder_label(),
                            workernames=workers,
                            factory=create_halide_factory(builder_type),
                            collapseRequests=True,
                            # We need counting access to our llvm branch during Halide builds.
                            # (We could probably get by with access during only a subset of
                            # our steps, but there doesn't appear to be a way to group
                            # lock requests across multiple-but-not-all-steps in a Build.)
                            locks=[llvm_build_locks[llvm_branch].access('counting')],
                            tags=builder_type.builder_tags())
    builder.builder_type = builder_type
    return builder


def create_halide_builders():
    for arch, bits, os in get_interesting_halide_targets():

        # Create the builders for Halide master against all llvm versions.
        for llvm_branch in _LLVM_BRANCHES:
            c['builders'].append(create_halide_builder(
                arch, bits, os, llvm_branch, Purpose.halide_main))

        # Create the builders for testing Halide branches (aka pull requests).
        # Mostly just test against the LLVM 'release' branch, for best turnaround.
        c['builders'].append(create_halide_builder(
            arch, bits, os, LLVM_RELEASE_BRANCH, Purpose.halide_testbranch))

        if arch == 'x86' and os in ['linux', 'osx']:
            # Also test Makefiles on x86-linux & osx, to ensure they
            # stay healthy. (Note: deliberately skip arm-linux, since they
            # are the slowest bots.)
            c['builders'].append(create_halide_builder(
                arch, bits, os, LLVM_RELEASE_BRANCH, Purpose.halide_testbranch, cmake=False))

    # Test against main llvm branch for pull requests, too (for at least one target)
    c['builders'].append(create_halide_builder(
        'x86', 64, 'linux', LLVM_TRUNK_BRANCH, Purpose.halide_testbranch))
    c['builders'].append(create_halide_builder(
        'x86', 64, 'linux', LLVM_TRUNK_BRANCH, Purpose.halide_testbranch, cmake=False))

    # Test against the 'old' llvm branch for pull requests, too (for at least one target)
    c['builders'].append(create_halide_builder(
        'x86', 64, 'linux', LLVM_OLD_BRANCH, Purpose.halide_testbranch))


def create_halide_scheduler(llvm_branch):
    # fields in 'change' for the ChangeFilters:
    # - project: the project string, as defined by the ChangeSource.
    # - repository: the repository in which this change occurred.
    # - branch: the branch on which this change occurred. Note that ‘trunk’ or ‘master’ is often denoted by None.
    # - category: the category, again as defined by the ChangeSource.
    # - codebase: the change’s codebase.

    def master_only(change, llvm_branch):
        # In theory we shouldn't see any codebase but halide, but in practice,
        # we do, so, deal with it:
        if change.codebase == 'llvm':
            print("Unexpected codebase=llvm in master_only, change.branch=", change.branch, " llvm_branch=",
                  llvm_branch)
            return change.branch == llvm_branch

        assert change.codebase == 'halide', (
            f"Saw change.codebase = {change.codebase} instead of 'halide' in master_only, change={change}")
        return change.branch == 'master' or change.branch is None

    def testbranch_only(change, llvm_branch):
        # In theory we shouldn't see any codebase but halide, but in practice,
        # we do, so, deal with it:
        if change.codebase == 'llvm':
            print("Unexpected codebase=llvm in testbranch_only, change.branch=", change.branch, " llvm_branch=",
                  llvm_branch)
            return change.branch == llvm_branch

        assert change.codebase == 'halide', (
            f"Saw change.codebase = {change.codebase} instead of 'halide' in testbranch_only, change={change}")
        return change.branch is not None and change.branch != 'master'

    # ----- main
    builders = [str(b.name) for b in c['builders']
                if b.builder_type.llvm_branch == llvm_branch and b.builder_type.purpose == Purpose.halide_main]
    if builders:
        scheduler = schedulers.SingleBranchScheduler(
            name='halide-' + to_name(llvm_branch),
            codebases=['halide'],
            change_filter=util.ChangeFilter(
                filter_fn=partial(master_only, llvm_branch=llvm_branch)),
            treeStableTimer=60 * 5,  # seconds
            builderNames=builders)

        c['schedulers'].append(scheduler)

        scheduler = schedulers.ForceScheduler(
            name='force-main-' + to_name(llvm_branch),
            builderNames=builders,
            codebases=['halide'])

        c['schedulers'].append(scheduler)

    # ----- testbranch
    builders = [str(b.name) for b in c['builders']
                if b.builder_type.llvm_branch == llvm_branch and b.builder_type.purpose == Purpose.halide_testbranch]
    if builders:
        scheduler = schedulers.SingleBranchScheduler(
            name='halide-testbranch-' + to_name(llvm_branch),
            codebases=['halide'],
            change_filter=util.ChangeFilter(
                filter_fn=partial(testbranch_only, llvm_branch=llvm_branch)),
            treeStableTimer=60 * 5,  # seconds
            builderNames=builders)

        c['schedulers'].append(scheduler)

        scheduler = schedulers.ForceScheduler(
            name='force-testbranch-' + to_name(llvm_branch),
            builderNames=builders,
            codebases=['halide'])

        c['schedulers'].append(scheduler)


def create_llvm_cmake_factory(builder_type):
    factory = BuildFactory()
    get_msvc_config_steps(factory, builder_type)
    add_get_llvm_source_steps(factory, builder_type)

    clean_llvm_rebuild = (builder_type.llvm_branch == LLVM_TRUNK_BRANCH)
    add_llvm_steps(factory, builder_type, clean_llvm_rebuild)

    return factory


def create_llvm_builders():
    for arch, bits, os in get_interesting_halide_targets():
        # Note that we want these Builders to run on *every* eligible worker;
        # the goal is to ensure that all LLVM builds are updated locally
        # on all of the workers.
        for llvm_branch in _LLVM_BRANCHES:
            builder_type = BuilderType(arch, bits, os, llvm_branch, Purpose.llvm_nightly)
            for w in builder_type.get_worker_names():
                # Note that we need the builder name to be unique across workers,
                # but we want the builddir on the *worker* side to be the same for all workers
                # (to simplify things).
                label = builder_type.llvm_builder_label()
                builder = BuilderConfig(name="%s/%s" % (label, w),
                                        workerbuilddir=label,
                                        workernames=[w],
                                        factory=create_llvm_cmake_factory(builder_type),
                                        collapseRequests=True,
                                        # We want exclusive access to this workerlock
                                        # thru all this Builder's steps. (We could probably
                                        # get by with holding it just during the install phase,
                                        # but we'd have to finesse some details like removing
                                        # the old install directory within the lock, and this
                                        # is much simpler.)
                                        locks=[llvm_build_locks[llvm_branch].access('exclusive')],
                                        tags=builder_type.builder_tags())
                builder.builder_type = builder_type
                c['builders'].append(builder)


def create_llvm_scheduler(llvm_branch):
    builders = [str(b.name) for b in c['builders']
                if b.builder_type.llvm_branch == llvm_branch and b.builder_type.purpose == Purpose.llvm_nightly]
    # Start every day at midnight Pacific; our buildbots use UTC for cron, so that's 8AM
    scheduler = schedulers.Nightly(
        name='llvm-nightly-' + to_name(llvm_branch),
        codebases=['llvm'],
        builderNames=builders,
        hour=8, minute=0)

    c['schedulers'].append(scheduler)

    for b in builders:
        scheduler = schedulers.ForceScheduler(
            name='force-llvm-nightly-%s' % b.replace('/', '_'),
            codebases=['llvm'],
            builderNames=[b])

        c['schedulers'].append(scheduler)


c['builders'] = []
create_llvm_builders()
create_halide_builders()

c['schedulers'] = []
for llvm_branch in _LLVM_BRANCHES:
    create_llvm_scheduler(llvm_branch)
    create_halide_scheduler(llvm_branch)


# Set the builder priorities


def prioritize_builders(buildmaster, builders):
    def importance(builder):
        builder_type = builder.config.builder_type
        assert builder_type

        # LLVM nightlies run only once a day (late at night) and should always
        # get priority over everything else.
        if builder_type.purpose == Purpose.llvm_nightly:
            return 0

        # Branch testers all need to come back before we can merge a PR,
        # so they all have equal next-highest priority.
        if builder_type.purpose == Purpose.halide_testbranch:
            return 1

        # non-branch testers are mostly used for bisecting failures that
        # didn't show up in the branch testers and doing binary
        # releases. We care most about the most recently-released llvm so
        # that we have a full set of builds for releases, then llvm trunk
        # for bisection, then older llvm versions.
        if builder_type.llvm_branch == LLVM_RELEASE_BRANCH:
            return 2
        if builder_type.llvm_branch == LLVM_TRUNK_BRANCH:
            return 3
        if builder_type.llvm_branch == LLVM_OLD_BRANCH:
            return 4
        return 5

    builders.sort(key=importance)

    print("prioritize_builders:")
    for b in builders:
        print("  PB: %s (%s) -> pri %d" %
              (b.name, b.config.builder_type.builder_label(), importance(b)))

    return builders


c['prioritizeBuilders'] = prioritize_builders

# WEB SERVER

password = Path('buildbot_www_pass.txt').read_text().strip()

authz = util.Authz(
    allowRules=[util.ForceBuildEndpointMatcher(role="admins"),
                util.StopBuildEndpointMatcher(role="admins"),
                util.RebuildBuildEndpointMatcher(role="admins"),
                util.EnableSchedulerEndpointMatcher(role="admins")],
    roleMatchers=[util.RolesFromUsername(roles=["admins"], usernames=["halidenightly"])])

c['www'] = dict(
    auth=util.UserPasswordAuth({'halidenightly': password}),
    authz=authz,
    port=8012,
)

# PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'Halide'
c['titleURL'] = 'http://halide-lang.org'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'https://buildbot.halide-lang.org/master/'

# DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': 'sqlite:///state.sqlite',
}

# GitHub Integration

builders = [str(b.name) for b in c['builders']]
gs = reporters.GitHubStatusPush(token=token,
                                context=Interpolate("buildbot/%(prop:buildername)s"),
                                startDescription='Build started.',
                                endDescription='Build done.',
                                verbose=True,
                                builders=builders)
c['services'] = [gs]

# Disable sending usage data
c['buildbotNetUsageData'] = None
